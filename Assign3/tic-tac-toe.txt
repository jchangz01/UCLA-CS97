Steps to Create Tic-Tac-Toe Project (labeled in numbers)

1. In console, use 

"npx create-app-app tic-tac-toe" to

   create a react project named tic-tac-toe

2. In project directory, use "npm start" to setup

   a local dev server for your project

3. In 'src' file, delete all files except index.js and index.css

4. Edit these files with the code provided by 

   https://codepen.io/gaearon/pen/oWWQNa?editors=0100

   and https://codepen.io/gaearon/pen/oWWQNa?editors=0100



Create a React component class by using "class <CLASS_NAME> 

extends React.Component"

	- Take in parameters known as props

		* Flow from parents to children 

		* Think of props to a component as attributes of a

		  normal html tag

	- Returns content to UI using the render() method 



You can use the 'onClick' to trigger events and rerender when a 

button is clicked

	ex. <button onClick = { () => { alert('clicked') }}>

		* Using arrow functions is a good convention in React



In JavaScript classes, you need to always call super when defining 

the constructor of a subclass. All React component classes that have

a constructor should start with a super(props) call. 

	- super(props) allows us to use 'this' in our constructor





5. Add a constructor to the Board component and set intial state to 

{squares: Array(9).fill(null),}, an array of size 9 filled with null

	

6. Add handleClick(i) function to board class and add onClick attribute

   assigned with the handleClick(i) function to 

	the button tag returned by the render method of Square

	- This will require props to be passed from Board to Square



To collect data from multiple children, or to have two child 

components communicate with each other, you need to declare the 

shared state in their parent component instead.

	- It is unadvised to pass a child's state to the parent component

	- Instead, create controlled components where the parent component 

 	  has full control over all its children

		ex. In our tic-tac-toe game, the Board component has 

		full control over the Square components b/c it is

		passing values to the Squares 



Data Change with Mutation

	var player = {score: 1, name: 'Jeff'};

	player.score = 2;

	// Now player is {score: 2, name: 'Jeff'}



Data Change without Mutation 

	var player = {score: 1, name: 'Jeff'};



	var newPlayer = Object.assign({}, player, {score: 2});

	// Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'}



	// Or if you are using object spread syntax proposal, you can write:

	// var newPlayer = {...player, score: 2};	



7. Change the react component, Square to a simple function 

   component because it only utilizes the render method 



When a react component only contain a render() method, we should just

write it as a function component.

	ex. class Square extends React.component --> function Square(props)

		NOTE! Be sure to remove all instances of 'this'

		and alter code accordingly 

		

8. Alter the Board react component's constructor to set a state 

   that indicates whether it is 'x' or 'o' turn

	ex. this.setState({ ..., xIsNext: true,})



9. In the handleClick(i) member function, add a command to take into 

   account which turn it is and display

	symbols on tic-tac-toe board accordingly. Also, change the 

	state of xIsNext to the opposite bool value. 



Use ternary coditional operators for simple if else cases

	ex.  XisNext ? 'x' : 'o' --> if XisNext = true, 'x' ; else, 'o'

	

10. Alter the 'status' constant var in Board's render function

    to say 'Next Player: ' + (either 'o' or 'x')



11. To declare a winner, add the calculateWinner(squares) { . . . }

    function to the bottom of the file

	Copy the code at https://reactjs.org/tutorial/tutorial.html



12. In Board's render function, set a var to value returned

    by calculateWinner(this.state.squares) 

	if returned true, set 'status' to 'Winner' + ('x' or 'o')

	else, set 'status' to 'Next player: ' + ('x' or 'o')



13. Add a condition to the handleClick(i) function; if 

    calculateWinner(squares) or squares[i] 

	does not equal null, return. This will disable any 

	changes made from clicks when a winner 

	has been declared or a square is already filled

	



14. To track the history of our game, we will lift up all 

    contents of our Board component to our Game component and 

	add an additional history variable to our state.

	ex. this.state = 

	{ history: [{ squares: Array(9).fill(null), }], . . . } 

		^ Makes history an array of square objects that 

		contain arrays of size 9.

	Make sure to:

	- Delete the constructor in Board.

	- Replace this.state.squares[i] with this.props.squares[i] 

	  in Board’s renderSquare.

	- Replace this.handleClick(i) with this.props.onClick(i)

	  in Board’s renderSquare.



15. Furthermore, lift up the handleClick method to the Game component 

    and make the render of the Game component

	to account for the status of the game. Remove the conditional

	statements and var declarations in the Board component.



16. In the handleClick(i) method, add

	const history = this.state.history;

   	const current = history[history.length - 1];



    and alter this.setState{ . . . } to

	this.setState({

      		history: history.concat([{

    			squares: squares,

      		}]),

      		xIsNext: !this.state.xIsNext,

    	});



Unlike the array push() method you might be more 

familiar with, the concat() method doesn’t mutate the original array, 

so we prefer it. 

	- concat(): merge two or more arrays w/o changing the existing

	            arrays, but instead returns a new array

		ex. const array3 = array1.concat(array2);

			Sets array 3 to array1 + array2 but keeps those 

			arrays the same





Info on map() method,

	const numbers = [1, 2, 3];

	const doubled = numbers.map(x => x * 2); // [2, 4, 6]



17. Map over the history in the Game's render method:

	const moves = history.map((step, move) => {

      		const desc = move ?

        		'Go to move #' + move :

        		'Go to game start';

      		return (

        		<li>

          			<button onClick={() => this.jumpTo(move)}>

						{desc}

					</button>

        		</li>

      		);

    	});



18. Add a key to each li in the history.map(...) call

	ex. <li key={move}> ... </li>



Info on keys

When a list is re-rendered, React takes each list item’s key and 

searches the previous list’s items for a matching key. If the current 

list has a key that didn’t exist before, React creates a component. 

If the current list is missing a key that existed in the previous list,

React destroys the previous component. If two keys match, the corresponding

component is moved. Keys tell React about the identity of each component 

which allows React to maintain state between re-renders. If a component’s

key changes, the component will be destroyed and re-created with a new state.



19. Add a new state property called stepNumber and set the starting value to 0.

	In the handleClick function, set state equal to history.length.

	Make const history equal to 

		this.state.history.slice(0, this.state.stepNumber + 1)



20. Implement jumpTo(step) function, so that stepNumber is

    returned to the turn we desire





	

